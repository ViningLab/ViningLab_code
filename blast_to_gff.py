#! /usr/bin/env python3

import argparse
import ntpath
import os
import sys


##### ##### ##### ##### #####
#
# argparse.
#
##### ##### ##### ##### #####

parser = argparse.ArgumentParser(description='Convert custom tabular blast output')
parser.add_argument("blast", help="File generated by blast in custom tabular format.")
#parser.add_argument('-e', '--example', nargs='?', const=1, type=int)
parser.add_argument("-p", "--perc_id", help="Percent identity threshold to report.", nargs='?', const=90.0 ,default=90.0, type=float)
parser.add_argument("-v", "--verbose", help="increase output verbosity",
                    action="store_true")
                    
args = parser.parse_args()


##### ##### ##### ##### #####
#
# Main.
#
##### ##### ##### ##### #####


# Manage outfile.

outfile = ntpath.basename(args.blast)
outfile = os.path.splitext(outfile) 

outfile = outfile[0]
#
outfile = outfile + '_b2g.gff'


# Write to file.
f = open(outfile, 'w', encoding="utf-8")
f.write("##gff-version 3")
f.write("\n")
f.write("# blast_to_gff.py")
f.write(" ")
f.write(args.blast)
f.write("\n")
f.write("# ['seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes']")
f.write("\n")
f.write("# c('seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes')")
f.write("\n")



# blast fileds = qseqid qlen sseqid slen qstart qend sstart send evalue bitscore


with open(args.blast) as f0:
# f0 = open(args.blast, 'r', encoding="utf-8")
    for line in f0:
        line = line.rstrip()
        # print(line)
        myline = line.split(",")
        if float(myline[12]) >= args.perc_id:
            f.write(myline[2])
            f.write("\t")
            f.write("blast")
            f.write("\t")
#        f.write(myline[0])
#        f.write("\t")
            f.write('match')
            f.write("\t")
            # GFF requires start < end.
            my_qstart = myline[6]
            my_qend = myline[7]
            if my_qstart < my_qend:
                f.write(myline[6])
                f.write("\t")
                f.write(myline[7])
            elif my_qstart >= my_qend:
                f.write(myline[7])
                f.write("\t")
                f.write(myline[6])
            else:
                sys.exit("ERROR: qstart and qend appear inappropriate.")
            f.write("\t")
            f.write(myline[8])
            f.write("\t")
            #f.write(".")
            #f.write(myline[19])
            if myline[19] == "plus":
                f.write("+")
            elif myline[19] == "minus":
                f.write("-")
            else:
                f.write(".")
                #f.write("?")
            f.write("\t")
            f.write(".")
            f.write("\t")
            #f.write(line)
            #f.write("ID=") # ID must be unique within GFF file.
            f.write("qseqid=")
            f.write(myline[0])
            f.write(";qlen=")
            f.write(myline[1])
            f.write(";evalue=")
            f.write(myline[8])
            f.write(";bitscore=")
            f.write(myline[9])
            f.write(";score=")
            f.write(myline[10])
            f.write(";length=")
            f.write(myline[11])
            f.write(";pident=")
            f.write(myline[12])
            f.write(";nident=")
            f.write(myline[13])
            f.write(";gaps=")
            f.write(myline[17])
            #if( myline[0] == "AB292682.1" ): # CBDAS
            if( "AB292682" in myline[0] ): # CBDAS
                f.write(";desc=CBDAS;color=#1E90FF")
            if( "AB292683" in myline[0] ): # CBDAS
                f.write(";desc=CBDAS;color=#1E90FF")
            if( "AB292684" in myline[0] ): # CBDAS
                f.write(";desc=CBDAS;color=#1E90FF")
            #if( myline[0] == "E55107.1" ): # CBDAS
            if( "E55107.1" in myline[0] ): # CBDAS
                f.write(";desc=CBDAS;color=#1E90FF")            
            if( "AB212829" in myline[0] ): # THCAS
                f.write(";desc=THCAS;color=#228B22")
            if( "AB212830" in myline[0] ): # THCAS
                f.write(";desc=THCAS;color=#228B22")
            #if( myline[0] == "AB057805.1" ): # THCAS
            if( "AB057805" in myline[0] ): # THCAS
                f.write(";desc=THCAS;color=#228B22")
            #if( myline[0] == "E33090.1" ): # THCAS
            if( "E33090" in myline[0] ): # THCAS
                f.write(";desc=THCAS;color=#228B22")
#        if( myline[0] == "LA634839.1" ): # Hop THCAS homolog (Hurgobin et al. 2020)
            if( "LA634839" in myline[0] ): # Hop THCAS homolog (Hurgobin et al. 2020)
                f.write(";desc=hop_THCAS;color=#66CDAA")
        #if( myline[0] == "LY658671.1" ): # CBCAS
            if( "LY658671" in myline[0] ): # CBCAS
                f.write(";desc=CBCAS;color=#FF4500")
            f.write("\n")


f.close()
f0.close()


# EOF.
